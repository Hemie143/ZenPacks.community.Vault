name: ZenPacks.community.Vault

zProperties:
  DEFAULTS:
    category: Vault
  zVaultPort:
    type: int
    default: 8200
  zVaultInstances:
    type: lines
    default: []

classes:
  VaultCluster:
    base: [zenpacklib.Component]
    label: Vault Cluster
    monitoring_templates: [VaultCluster]
    properties:
      cluster_name:
        grid_display: false
      cluster_id:
        grid_display: false
      unavailable_nodes:
        grid_display: false
        type: lines
      sealed_nodes:
        grid_display: false
        type: lines

  VaultInstance:
    base: [zenpacklib.Component]
    label: Vault Instance
    monitoring_templates: [VaultInstance]
    relationships:
      vaultCluster:
        label_width: 20
    properties:
      cluster_name:
        grid_display: false
      version:
        grid_display: false
      initialized:
        grid_display: true
        label: Initialized
        enum:
          0: 'Not initialized'
          1: 'Initialized'
        datapoint: vaultinstance_init
        datapoint_cached: true
        datapoint_default: 0
      sealed:
        grid_display: true
        label: Sealed
        enum:
          0: 'Unsealed'
          1: 'Sealed'
        datapoint: vaultinstance_sealed
        datapoint_cached: true
        datapoint_default: 0
      active:
        grid_display: true
        label: Standby
        enum:
          0: 'Unavailable'
          1: 'Standby'
          2: 'Active'
        datapoint: vaultinstance_active
        datapoint_cached: true
        datapoint_default: 0
      replication_performance_mode:
        grid_display: false
      performance_standby:
        grid_display: false
        type: boolean
      replication_dr_mode:
        grid_display: false
      host:
        grid_display: false

class_relationships:
  - ZenPacks.zenoss.LinuxMonitor.LinuxDevice.LinuxDevice(vaultClusters) 1:MC (linuxDevice)VaultCluster
  - VaultCluster(vaultInstances) 1:MC (vaultCluster)VaultInstance

device_classes:
  /Server/SSH/Linux/Vault:
    zProperties:
      zPingMonitorIgnore: false
      zSnmpMonitorIgnore: true

    templates:
      VaultCluster:
        targetPythonClass: ZenPacks.community.Vault.VaultCluster
        datasources:
          cluster:
            type: Python
            plugin_classname: ZenPacks.community.Vault.dsplugins.vault.Vault
            datapoints:
              num_sealed:
                rrdtype: GAUGE_MIN_0
              num_unavailable:
                rrdtype: GAUGE_MIN_0
              num_active:
                rrdtype: GAUGE_MIN_0
        thresholds:
          Unavail:
            dsnames:
            - cluster_num_unavailable
            eventClass: /Status/Vault/Cluster/Unavailable
            maxval: '1'
          Sealed:
            dsnames:
            - cluster_num_sealed
            eventClass: /Status/Vault/Cluster/Sealed
            maxval: '1'
        graphs:
          Nodes Sealed:
            units: nodes
            miny: 0
            graphpoints:
              Nodes Sealed:
                lineType: AREA
                dpName: cluster_num_sealed
          Nodes Unavailable:
            units: nodes
            miny: 0
            graphpoints:
              Nodes Unavailable:
                lineType: AREA
                dpName: cluster_num_unavailable
          Nodes Active:
            units: nodes
            miny: 0
            graphpoints:
              Nodes Active:
                lineType: AREA
                dpName: cluster_num_active

      VaultInstance:
        targetPythonClass: ZenPacks.community.Vault.VaultInstance
        datasources:
          vaultinstance:
            type: Python
            plugin_classname: ZenPacks.community.Vault.dsplugins.vault.Vault
            datapoints:
              sealed:
                rrdtype: GAUGE_MIN_0_MAX_1
              init:
                rrdtype: GAUGE_MIN_0_MAX_1
              active:
                rrdtype: GAUGE_MIN_0_MAX_2
        thresholds:
          Unavailable:
            type: DurationThreshold
            dsnames:
            - vaultinstance_active
            eventClass: /Status/Vault/Instance/Unavailable
            minval: '0.5'
            timePeriod: 60 minutes
          Sealed:
            type: DurationThreshold
            dsnames:
            - vaultinstance_sealed
            eventClass: /Status/Vault/Instance/Sealed
            maxval: '0'
            timePeriod: 10 minutes
        graphs:
          Sealed:
            miny: 0
            maxy: 1
            units: (0=Unsealed, 1=Sealed)
            graphpoints:
              Sealed:
                lineType: AREA
                dpName: vaultinstance_sealed

event_classes:
  /Status/Vault:
    remove: false
  /Status/Vault/Cluster:
    remove: false
  /Status/Vault/Cluster/Sealed:
    remove: false
    transform: |-
      if 'cluster_num_sealed' in evt.eventKey:
        if evt.current == 0:
          message = 'Vault Cluster {} - All nodes are unsealed'
          summary = message
        else:
          sealed_nodes = component.get_sealed_nodes()
          message = 'Vault Cluster {} - The following nodes are sealed: {}'.format(component.title, ', '.join(sealed_nodes))
          summary = 'Vault Cluster {} - Nodes are sealed'.format(component.title)
        evt.message = message
        evt.summary = summary

  /Status/Vault/Cluster/Unavailable:
    remove: false
    transform: |-
      if 'cluster_num_unavailable' in evt.eventKey:
        if evt.current == 0:
          message = 'Vault Cluster {} - All nodes are available'.format(component.title)
          summary = message
        else:
          unavail_nodes = component.get_unavailable_nodes()
          message = 'Vault Cluster {} - The following nodes are unavailable: {}'.format(component.title, ', '.join(unavail_nodes))
          summary = 'Vault Cluster {} - Nodes are unavailable'.format(component.title)
        evt.message = message
        evt.summary = summary

  /Status/Vault/Instance:
    remove: false

  /Status/Vault/Instance/Unavailable:
    remove: false
    transform: |-
      if 'vaultinstance_active' in evt.eventKey:
        map_value = {
          0: 'unavailable',
          1: 'in standby',
          2: 'active',
        }
        unavail_value = int(float(evt.current))
        if unavail_value == 0:
          message = 'Vault Node {} is {} for more than {}'.format(component.title,
                                                                  map_value[unavail_value],
                                                                  evt.timePeriod)
        else:
          message = 'Vault Node {} is {}'.format(component.title, map_value[unavail_value])
        evt.message = message
        evt.summary = message

  /Status/Vault/Instance/Sealed:
    remove: false
    transform: |-
      if 'vaultinstance_sealed' in evt.eventKey:
        map_value = {
          0: 'unsealed',
          1: 'sealed',
        }
        sealed_value = int(float(evt.current))
        if sealed_value == 1:
          message = 'Vault Node {} is {} for more than {}'.format(component.title,
                                                                  map_value[sealed_value],
                                                                  evt.timePeriod)
        else:
          message = 'Vault Node {} is {}'.format(component.title, map_value[sealed_value])
        evt.message = message
        evt.summary = message
